right_x = self.x + self.width
        bottom_y = self.y + self.height
        if self.vector_move == 0:
            left_x_p = player.x
            right_x_p = player.x + player.width
            top_y_p = player.y
            bottom_y_p = player.y + player.height
            #top corner
            if left_x_p + 15 <= right_x:
                if top_y_p + 30 <= self.y:
                    if bottom_y_p - 5 >= self.y:
                        if right_x_p - 20 >= right_x:
                            player.damage_player()
            
            #middle (golden)
            if left_x_p + 15 <= right_x:
                if top_y_p + 30 >= self.y:
                    if bottom_y_p <= bottom_y:
                        if right_x_p - 20 >= right_x:
                                player.damage_player()

            #bottom corner                            
            if left_x_p + 15 <= right_x:
                if top_y_p + 30 <= bottom_y:
                    if bottom_y_p >= bottom_y:
                        if right_x_p - 20 >= right_x:
                            player.damage_player()

            for block in blocks:
                answer = block.check_collision_right_wall(self.x, self.y, #CHECKING TOUCH RIGHT WALL OF BLOCK
                                                        self.x + self.width, self.y + self.height)
                if answer:
                    self.vector_move = 1

                    if self.run_count == 3: 
                        self.run_count = 0
                    else:
                        if self.sprite_frequency_rooster >= 10: 
                            self.run_count += 1
                            self.sprite_frequency_rooster = 0
                        else: self.sprite_frequency_rooster += 1
            
            for chest in chests:
                answer = chest.check_collision_right_wall(self.x, self.y, #CHECKING TOUCH RIGHT WALL OF CHEST
                                                        self.x + self.width, self.y + self.height)
                if answer:
                    self.vector_move = 1

                    if self.run_count == 3: 
                        self.run_count = 0
                    else:
                        if self.sprite_frequency_rooster >= 10: 
                            self.run_count += 1
                            self.sprite_frequency_rooster = 0
                        else: self.sprite_frequency_rooster += 1

            if answer != True:
                self.x -= self.speed

                if self.run_count == 3: 
                    self.run_count = 0
                else:
                    if self.sprite_frequency_rooster >= 10: 
                        self.run_count += 1
                        self.sprite_frequency_rooster = 0
                    else: self.sprite_frequency_rooster += 1
        else:
            left_x_p = player.x
            right_x_p = player.x + player.width
            top_y_p = player.y
            bottom_y_p = player.y + player.height
            #top corner
            if left_x_p + 20 <= self.x:
                if top_y_p + 30 <= self.y:
                    if bottom_y_p - 5 >= self.y:
                        if right_x_p - 15 >= self.x:
                            player.damage_player()
            
            #middle (golden)
            if left_x_p + 20 <= self.x:
                if top_y_p + 30 >= self.y:
                    if bottom_y_p <= bottom_y:
                        if right_x_p - 15 >= self.x:
                            player.damage_player()
                                        
            #bottom corner
            if left_x_p + 20 <= self.x:
                if top_y_p + 30 <= bottom_y:
                    if bottom_y_p >= bottom_y:
                        if right_x_p - 15 >= self.x:
                            player.damage_player()

            for block in blocks:
                answer = block.check_collision_left_wall(self.x, self.y, #CHECKING TOUCH LEFT WALL OF BLOCK
                                                        self.x + self.width, self.y + self.height)
                if answer:
                    self.vector_move = 0

                    if self.run_count == 3: 
                        self.run_count = 0
                    else:
                        if self.sprite_frequency_rooster >= 10: 
                            self.run_count += 1
                            self.sprite_frequency_rooster = 0
                        else: self.sprite_frequency_rooster += 1

            for chest in chests:
                answer = chest.check_collision_left_wall(self.x, self.y, #CHECKING TOUCH LEFT WALL OF CHEST
                                                        self.x + self.width, self.y + self.height)
                if answer:
                    self.vector_move = 0

                    if self.run_count == 3: 
                        self.run_count = 0
                    else:
                        if self.sprite_frequency_rooster >= 10: 
                            self.run_count += 1
                            self.sprite_frequency_rooster = 0
                        else: self.sprite_frequency_rooster += 1
            
            for box in boxes:
                answer = box.check_collision_left_wall(self.x, self.y, #CHECKING TOUCH LEFT WALL OF BOXES
                                                        self.x + self.width, self.y + self.height)
                if answer:
                    self.vector_move = 0

                    if self.run_count == 3: 
                        self.run_count = 0
                    else:
                        if self.sprite_frequency_rooster >= 10: 
                            self.run_count += 1
                            self.sprite_frequency_rooster = 0
                        else: self.sprite_frequency_rooster += 1

            if answer != True:
                self.x += self.speed

                if self.run_count == 3: 
                    self.run_count = 0
                else:
                    if self.sprite_frequency_rooster >= 10: 
                        self.run_count += 1
                        self.sprite_frequency_rooster = 0
                    else: self.sprite_frequency_rooster += 1